(select-desc-by-lang "en" (:descriptions (first (get-movies))))
(select-desc-by-lang "ru" (:descriptions (first (get-movies))))
(use 'mooviefishsrv.models.db :reload)
(select-desc-by-lang "ru" (:descriptions (first (get-movies))))
(select-desc-by-lang "en" (:descriptions (first (get-movies))))
(select-desc-by-lang "ar" (:descriptions (first (get-movies))))
(use 'mooviefishsrv.models.db :reload)
(select-desc-by-lang "ar" (:descriptions (first (get-movies))))
(use 'mooviefishsrv.models.db :reload)
(select-desc-by-lang "ar" (:descriptions (first (get-movies))))
(select-desc-by-lang "ru" (:descriptions (first (get-movies))))
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" (first (get-movies)))
(make-abs-url "kkk")
(make-abs-url nil)
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" (first (get-movies)))
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" (first (get-movies)))
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" (first (get-movies)))
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" (first (get-movies)))
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" (first (get-movies)))
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" (first (get-movies)))
(use 'mooviefishsrv.models.db :reload)
(get-movies "en")
(use 'mooviefishsrv.models.db :reload)
(get-movies "en")
(use 'mooviefishsrv.models.db :reload)
(get-movies "en")
(quit)
(doc in-ns)
(use 'mooviefishsrv.models.db)
(get-movies en)
(get-movies "en")
movies
(prn movies)
(load-file "src/mooviefish/src/models/movies.clj")
(directory ".")
(find-doc "dir")
(find-doc "directory")
(load "movies.clj")
(load "movies")
(classpath)
(find-doc "classpath")
(println (seq (.getURLs (java.lang.ClassLoader/getSystemClassLoader))))
(load "models/movies")
(load "mooviefish.models/movies")
(load "models/movies")
(quit)
(use 'mooviefishsrv.models.db)
(get-movies "en")
(= movies mm)
(diff movies mm)
movies
mm
(typeof "")
(find-doc "equal")
(compare movies mm)
(find-doc "diff")
(quit)
(get-movie "en"  "1001")
{
"
)
(quit)
(get-movie "en"  "1001")
(:use 'mooviefishsrv.models.db :reload-all)
(:use 'mooviefishsrv.models.db)
(get-movie "en"  "1001")
(use 'mooviefishsrv.models.db)
(get-movie  "en" 1001)
(get-movie  "en" "1001")
(load-file "data/users.data")
(prn (load-file "data/users.data"))
(quit)
(use 'mooviefishsrv.models.db)
(wrap-base-url)
(use 'compojure.route)
(quit)
(use 'mooviefishsrv.models.db)
(get-movies "data/movies.data")
(def mm (get-movies "data/movies.data"))
mm
(class mm)
{:a 1 :b 2}
(def zz {:a 1 :b 2} {:a 3 :b 4})
(def zz [{:a 1 :b 2} {:a 3 :b 4}])
zz
(reduce #(:a %1) zz)
(def aa #{})
aa
(assoc aa (:a zz) (first zz))
zz
(for [e zz] [(:a e) e])
(into {} (for [e zz] [(:a e) e]))
(use 'mooviefishsrv.models.db)
(use 'mooviefishsrv.models.db :reload-all)
(load-movies movies-data)
(use 'mooviefishsrv.models.db :reload-all)
movies
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(load-movies movies-data)
movies
@movies
(use 'mooviefishsrv.models.db :reload-all)
(load-movies movies-data)
(use 'mooviefishsrv.models.db :reload-all)
(load-movies movies-data)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(load-movies movies-data)
(use 'mooviefishsrv.models.db :reload-all)
(load-movies movies-data)
movies
(use 'mooviefishsrv.models.db :reload-all)
movies
@movies
(load-movies movies-data)
@movies
(get movies 1001)
(get @movies 1001)
(use 'mooviefishsrv.models.db :reload-all)
(get @movies 1001)
(load-movies movies-data)
(get @movies 1001)
(get-movie "ru" "1001")
(val @movies)
(vals @movies)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(load-movies-data)
@movies
(get-movies "en")
(movie-count)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(load-movies-data)
(get-movie "en" "1001")
(get-movie "ru" "1001")
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "11111" "1001")
(def aa (aquire-movie "11111" "1001"))
(:id aa)
(:permission aa)
(:did aa)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" "1001")
(get :a #{})
(get :a #{} :b)
(def aa #{})
(update-in [:a] (get :a #{} :b))
(update-in [:a] aa (get :a #{} :b))
(update-in aa [:a] (get :a #{} :b))
(update-in #{} [:a] (get :a #{} :b))
(update-in #{} [:a] "aa")
(update-in #{:a "ss"} [:a] "aa")
(update-in {:a "ss"} [:a] "aa")
(assoc {:a "ss"} :a "bb")
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" "1001")
users
@users
(clojure.string/split "Spaces Newlines\n\n" #"\s+")
(bigint "122333444455555666666777777788888888999999999")
(Integer/toString 42 16)
�
(Integer/toString 42 2)
(java.util.UUID/randomUUID)
(java.util.Date.)
(conj (list 1 2 3) 4 5)
(source defroutes)
(source 'defroutes)
(pprint (loaded-libs))
(dir clojure.main)
(use 'mooviefishsrv.models.db :reload-all)
(dir mooviefishsrv.models.db)
(source movies-data)
(source movies)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" "222")
(count @users)
(aquire-movie "111" "222")
(prn @users)
(aquire-movie "111" "222")
(prn @users)
(aquire-movie "222" "222")
(prn @users)
(use 'mooviefishsrv.models.db :reload-all)
(prn @users)
(aquire-movie "222" "1001")
(aquire-movie "111" "1001")
(prn @users)
��H
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" "1001")
���
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" "1001")
(aquire-movie "222" "1001")
(swap! users assoc :a 1)
(swap! users assoc :b 1)
(swap! users assoc :b 2)
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "222" "1001")
(aquire-movie "111" "1001")
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" "1001")
(aquire-movie "112" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" "1001")
(aquire-movie "112" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "112" "1001")
(aquire-movie "111" "1001")
(aquire-movie "114" "1001")
(prn @users)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "114" "1001")
(aquire-movie "112" "1001")
(prn @users)
(@users 112)
(:mid (@users 112))
(assoc 1002 (:mid (@users 112)))
(use 'mooviefishsrv.models.db :reload-all)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "112" "1001")
(aquire-movie "114" "1001")
(prn @users)
(conj (:mid (@users 112)) 1001)
(prn @users)
(:mid (@users 112))
((@users 112) :mids)
(conj (:mids (@users 112)) 1001)
(prn @users)
(conj ((@users 112) :mids) 1001)
(prn @users)
(quit)
{a: #{}}
(def aa {a: #{}})
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(prn "aaaaa")
(aquire-movie "114" "1001")
(aquire-movie "113" "1001")
(aquire-movie "112" "1001")
(prn @users)
(assoc-in @users [112 :mids] 1001)
(assoc-in @users [112 :mids] 1002)
(assoc-in @users [112 :mids] 1003)
(assoc-in @users [112 :mids] (conj 1003))
(swap! users assoc-in [112 :mids] 1001)
(swap! users assoc-in [112 :mids] 1002)
(swap! users update-in [112 :mids] conj 1001)
(conj #{} 1001)
(conj #{} 1002)
(conj #{1001} 1002)
(prn @users)
(update-in @users [112 :mid] conj 1001)
(prn @users)
(swap! @users update-in [112 :mid] conj 1001)
(swap! users update-in [112 :mid] conj 1001)
(swap! users update-in [112 :mids] conj 1001)
(update-in @users [112 :mids] conj 1001)
(update-in @users [112 :mids] assoc 1001)
(update-in @users [112 :mids] conj 1001)
(get-in @users [112 :mids])
(prn @users)
(update-in @users [113 :mids] conj 1001)
(update-in @users [113 :mids] conj 1002)
(update-in @users [113 :mids] conj 1001)
(swap! users update-in [114 :mids] conj 1001)
(swap! users update-in [114 :mids] conj 1002)
(swap! users update-in [114 :mids] conj 1004)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(prn  @users)
(aquire-movie "110" "1001")
(aquire-movie "110" "1002")
(aquire-movie "110" "1003")
(aquire-movie "111" "1003")
(aquire-movie "111" "1001")
(prn  @users)
(use 'mooviefishsrv.models.db :reload-all)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" "1001")
(aquire-movie "111" "1002")
(aquire-movie "111" "1003")
(swap! users update-in [111 :mids] conj 1004)
@users
(swap! users update-in [111 :mids] conj 1002)
@users
(aquire-movie "111" 1003)
(aquire-movie "111" "1007")
(prn @users)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" 1003)
(aquire-movie "111" "1003")
(aquire-movie "111" "1002")
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" "1002")
(aquire-movie "111" "1003")
(aquire-movie "111" "1004")
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" "1004")
(aquire-movie "111" "1003")
(aquire-movie "111" "1002")
(aquire-movie "111" "1001")
(prn @utils)
(prn @users)
(aquire-movie "112" "1001")
(prn @users)
(quit)
(aquire-movie "112" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "112" "1001")
(aquire-movie "112" "1002")
(prn @users)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "112" "1002")
(acquire-movie "112" "1002")
(acquire-movie "112" "1003")
(prn @users)
(quit)
(defn now [] (new java.util.Date))
now
(use 'mooviefishsrv.models.db :reload-all)
(time/now)
(use 'mooviefishsrv.models.db :reload-all)
(time/now)
time/now
(quit)
(time/now)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(acquire-movie "112" "1003")
(time-format/formatters :basic-date-time)
(use 'mooviefishsrv.models.db :reload-all)
(time-format/formatters :basic-date-time)
(require '[clj-time.format :as f])
(f/show-formatters)
(def built-in-formatter (f/formatters :basic-date-time))
(acquire-movie "112" "1002")
(time/now)
(quit)
(assoc {a: 1} 2}
(assoc {} a: 2}
(assoc {} a: 2)
{}
(assoc {} a: 2)
(assoc {} a 2)
(assoc {} a: 2)
(assoc {} :a 2)
(assoc {} :a 3)
(assoc {} :a 4)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(acquire-movie "112" "1002")
(prn @users)
(acquire-movie "112" "1003")
(prn @users)
(quit)
(acquire-movie "112" "1003")
(use 'mooviefishsrv.models.db :reload-all)
(acquire-movie "112" "1003")
(prn @users)
(get-in users [112 :mids])
(get-in users [112 :mids 1003] )
(get-in users [112])
(get-in @users [112])
(get-in @users [112 :mids])
(get-in @users [112 :mids] 1003)
(if-let [m (get-in @users [112 :mids] 1003)] "yes" "no")
(if-let [m (get-in @users [112 :mids] 1002)] "yes" "no")
(get-in @users [112 :mids] 1002)
(get-in @users [112 :mids 1002])
(get-in @users [112 :mids 1003])
(if-let [m (get-in @users [112 :mids 1002])] "yes" "no")
(if-let [m (get-in @users [112 :mids 1003])] "yes" "no")
(if-let [m (get-in @users [112 :mids 1003])] m m)
(if-let [m (get-in @users [112 :mids 1003])] m )
(if-let [m (get-in @users [112 :mids 1002])] m )
(if-let [m (get-in @users [112 :mids 1002])] m "no")
(if-let [m (get-in @users [112 :mids 1003])] m "no")
(if-let [m (get-in @users [112 :mids 1003])] (conj (:date m) "aaa") "no")
(if-let [m (get-in @users [112 :mids 1003])] (conj {:date m} "aaa") "no")
(if-let [m (get-in @users [112 :mids 1003])] m "no")
(def q (if-let [m (get-in @users [112 :mids 1003])] m "no"))
q
(:date q)
(conj (:date q) "qqq")
#{time/now}
#{(time/now)}
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(acquire-movie "112" "1003")
(prn @users)
(acquire-movie "112" "1003")
(prn @users)
(acquire-movie "112" "1002")
(prn @users)
(acquire-movie "111" "1002")
(prn @users)
(use 'mooviefishsrv.models.db :reload-all)
(acquire-movie "111" "1002")
(prn @users)
(acquire-movie "111" "1002")
(prn @users)
(acquire-movie "111" "1002")
(prn @users)
(quit)
(acquire-movie "111" "1002")
(use 'mooviefishsrv.models.db :reload-all)
(acquire-movie "111" "1002")
(prn @users)
(acquire-movie "111" "1002")
(acquire-movie "111" "1003")
(acquire-movie "111" "1004")
(prn @users)
(acquire-movie "111" "1004")
(prn @users)
(use 'mooviefishsrv.models.db :reload-all)
(prn @users)
(acquire-movie "111" "1004")
(prn @users)
(acquire-movie "111" "1004")
(prn @users)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(acquire-movie "111" "1004")
(prn @users)
(use 'mooviefishsrv.models.db :reload-all)
(acquire-movie "111" "1004")
(prn @users)
(get-in users 111 :mids 1004)
(get-in users [111 :mids 1004])
(get-in users [111 :mids])
(get-in users [111])
(get-in @users [111])
(get-in @users [111 :mids])
(get-in @users [111 :mids 1004])
(use 'mooviefishsrv.models.db :reload-all)
(prn @users)
(acquire-movie "111" "1004")
(prn @users)
(use 'mooviefishsrv.models.db :reload-all)
(prn @users)
(acquire-movie "111" "1004")
(prn @users)
(acquire-movie "111" "1004")
(prn @users)
(acquire-movie "111" "1004")
(prn @users)
(acquire-movie "111" "1004")
(prn @users)
(acquire-movie "111" "1004")
(prn @users)
(use 'mooviefishsrv.models.db :reload-all)
(prn @users)
(acquire-movie "111" "1004")
(prn @users)
(acquire-movie "111" "1004")
(prn @users)
(acquire-movie "111" "1004")
(prn @users)
(use 'mooviefishsrv.models.db :reload-all)
(acquire-movie "111" "1004")
(prn @users)
(acquire-movie "112" "1004")
(prn @users)
(get-movies "en")
(load-movies)
(load-movies-data)
(get-movies "en")
(quit)
