(get-short-desc "en" d1)
(first movies)
(get-short-desc (first movies))
(get-short-desc "en" (first movies))
(couch/with-db db (couch/bulk-update movies))
(cluch/with-db db (couch/bulk-update movies))
(cluch/with-db db (cluch/bulk-update movies))
(couch/with-db db (couch/bulk-update movies))
(couch/bulk-update db movies)
(com.ashafa.clutch/bulk-update db movies)
(get-docs)
(def d1 (first (get-docs)))
(get-short-desc "en" d1)
(com.ashafa.clutch/bulk-update db movies)
db
(get-docs)
(couch/create-database db)
(com.ashafa.clutch/create-database db)
(com.ashafa.clutch/bulk-update db movies)
(get-docs)
(def d1 (first (get-docs)))
(get-short-desc "en" d1)
(use 'mooviefishsrv.models.db :reload)
(def d1 (first (get-docs)))
(get-short-desc "en" d1)
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" d1)
(into {} (filter val {:a 1, :b 2, :c nil}))
d1
(:descriptions d1)
(def dd (:descriptions d1))
dd
(filter val dd)
(filter #(if (%) %) dd)
(into {} (for [[e] dd :when (= (:lang e) "en")] [e]))
(for [ e dd :when (= (:lang e) "en")] e)
(for [ e dd :when (= (:lang e) "ru")] e)
(defn select-desc-by-lang [lang desc] 
(first (for [ e desc :when (= (:lang e) "ru")] e)))
(select-desc-by-lang "ru" (:descriptions d1)) 
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" d1)
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" d1)
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" d1)
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" d1)
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" d1)
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" d1)
(def movies [
{
:shortname"monsters", 
:descriptions [
{
:lang "en" 
:title "Monsters University", 
:desc "A look at the relationship between Mike and Sulley during their days at Monsters University -- when they weren't necessarily the best of friends.",
 :img "monsters.jpg",
 :year-released "2013"
}
{
:lang "ru" 
:title "Университет монстров (2013)", 
:desc "Майк и Салли — самые опытные пугатели в Монстрополисе, но так было далеко не всегда. Когда они встретились впервые, эти монстры терпеть друг друга не могли. «Университет Монстров» — история о том, как наши старые знакомые прошли путь от взаимной неприязни к крепкой дружбе.",
 :img "monsters.jpg"
 :year-released "2013"
}
]
:fpkeys-file "monsters.fpkeys",
  :translations [
  {
 :lang "ru", 
 :title "Русский", 
 :desc "From original dvd", 
 :file "monsters-ru.mp3",
 :img nil 
 }
  {
  :lang "he", 
  :title "עברית", 
  :desc "From original dvd", 
  :file nil,
  :img nil 
  }
  ]
    }
    {
:shortname "smurfs", 
:descriptions [
{
:lang "en"  
:title "The Smurfs", 
:desc "When the evil wizard Gargamel chases the tiny blue Smurfs out of their village, they tumble from their magical world into New York City.",
 :img "smurfs.jpg",
 :year-released "2011"
}
]
:fpkeys-file "smurfs.fpkeys",
  :translations [
  {
 :lang "ar", 
 :title "Arabic", 
 :desc "From original dvd",
 :file "smurfs-ar.mp3" 
 :img nil 
 }
  {
  :lang "he", 
  :title "עברית", 
  :desc "From original dvd",
  :file "smurfs-he.mp3" 
  :img nil 
  }
  ]
   }
   {
:shortname "despicableme2", 
:descriptions [
{
:lan:title "Despicable Me 2", 
:desc "Gru is recruited by the Anti-Villain League to help deal with a powerful new super criminal.",
 :img "despicableme2.jpg",
 :year-released "2013"
}
]
:fpkeys-file "despicableme2.fpkeys",
  :translations [
  {
 :lang "ru", 
 :title "Русский", 
 :desc "From original dvd",
 :file "despicableme2-ru.mp3" 
 :img nil 
 }
  {
  :lang "he", 
  :title "עברית", 
  :desc "From original dvd",
  :file "despicableme2-he.mp3" 
  :img nil 
  }
  ]
   }
   ])
(couch/create-database db)
(use 'com.ashafa.clutch :as couch)
(require 'com.ashafa.clutch :as couch)
(com.ashafa.clutch/create-database db)
(com.ashafa.clutch/bulk-update movies)
(com.ashafa.clutch/bulk-update db movies)
(use 'mooviefishsrv.models.db :reload)
(get-docs)
(first (get-docs))
(get-short-desc "en" (first (get-docs))
)
(get-short-desc "en" (first (get-docs)))
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" (first (get-docs)))
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" (first (get-docs)))
dd
d1
(:translations d1)
(get-docs)
(last (get-docs))
(def d2 (last (get-docs)))
(def t2 (:translations (last (get-docs))))
t2
(first t2)
(update-url-in-translation (first t2))
(use 'mooviefishsrv.models.db :reload)
(update-url-in-translation (first t2))
(update-url-in-translation (nth t2 0))
(update-url-in-translation (nth t2 1))
(update-url-in-translation (nth t2 2))
(def d2 (first (get-docs)))
(def t2 (:translations (first (get-docs))))
(update-url-in-translation (nth t2 0))
(update-url-in-translation (nth t2 1))
(use 'mooviefishsrv.models.db :reload)
(update-url-in-translation (nth t2 1))
(map update-url-in-translation t2)
d1
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" (first get-docs))
(get-short-desc "en" (first (get-docs)))
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" (first (get-movies)))
(first (get-movies))
(:descriptions (first (get-movies)))
(select-desc-by-lang "en" (first (get-movies)))
(select-desc-by-lang "en" (:descriptions (first (get-movies))))
(select-desc-by-lang "ru" (:descriptions (first (get-movies))))
(select-desc-by-lang "ar" (:descriptions (first (get-movies))))
(select-desc-by-lang "aa" (:descriptions (first (get-movies))))
(def dsk1 (:descriptions (first (get-movies))))
dsk1
(use 'mooviefishsrv.models.db :reload)
(def dsk1 (:descriptions (first (get-movies))))
(select-desc-by-lang "aa" (:descriptions (first (get-movies))))
(select-desc-by-lang "en" (:descriptions (first (get-movies))))
(select-desc-by-lang "ru" (:descriptions (first (get-movies))))
(use 'mooviefishsrv.models.db :reload)
(select-desc-by-lang "ru" (:descriptions (first (get-movies))))
(select-desc-by-lang "en" (:descriptions (first (get-movies))))
(select-desc-by-lang "ar" (:descriptions (first (get-movies))))
(use 'mooviefishsrv.models.db :reload)
(select-desc-by-lang "ar" (:descriptions (first (get-movies))))
(use 'mooviefishsrv.models.db :reload)
(select-desc-by-lang "ar" (:descriptions (first (get-movies))))
(select-desc-by-lang "ru" (:descriptions (first (get-movies))))
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" (first (get-movies)))
(make-abs-url "kkk")
(make-abs-url nil)
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" (first (get-movies)))
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" (first (get-movies)))
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" (first (get-movies)))
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" (first (get-movies)))
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" (first (get-movies)))
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" (first (get-movies)))
(use 'mooviefishsrv.models.db :reload)
(get-movies "en")
(use 'mooviefishsrv.models.db :reload)
(get-movies "en")
(use 'mooviefishsrv.models.db :reload)
(get-movies "en")
(quit)
(doc in-ns)
(use 'mooviefishsrv.models.db)
(get-movies en)
(get-movies "en")
movies
(prn movies)
(load-file "src/mooviefish/src/models/movies.clj")
(directory ".")
(find-doc "dir")
(find-doc "directory")
(load "movies.clj")
(load "movies")
(classpath)
(find-doc "classpath")
(println (seq (.getURLs (java.lang.ClassLoader/getSystemClassLoader))))
(load "models/movies")
(load "mooviefish.models/movies")
(load "models/movies")
(quit)
(use 'mooviefishsrv.models.db)
(get-movies "en")
(= movies mm)
(diff movies mm)
movies
mm
(typeof "")
(find-doc "equal")
(compare movies mm)
(find-doc "diff")
(quit)
(get-movie "en"  "1001")
{
"
)
(quit)
(get-movie "en"  "1001")
(:use 'mooviefishsrv.models.db :reload-all)
(:use 'mooviefishsrv.models.db)
(get-movie "en"  "1001")
(use 'mooviefishsrv.models.db)
(get-movie  "en" 1001)
(get-movie  "en" "1001")
(load-file "data/users.data")
(prn (load-file "data/users.data"))
(quit)
(use 'mooviefishsrv.models.db)
(wrap-base-url)
(use 'compojure.route)
(quit)
(use 'mooviefishsrv.models.db)
(get-movies "data/movies.data")
(def mm (get-movies "data/movies.data"))
mm
(class mm)
{:a 1 :b 2}
(def zz {:a 1 :b 2} {:a 3 :b 4})
(def zz [{:a 1 :b 2} {:a 3 :b 4}])
zz
(reduce #(:a %1) zz)
(def aa #{})
aa
(assoc aa (:a zz) (first zz))
zz
(for [e zz] [(:a e) e])
(into {} (for [e zz] [(:a e) e]))
(use 'mooviefishsrv.models.db)
(use 'mooviefishsrv.models.db :reload-all)
(load-movies movies-data)
(use 'mooviefishsrv.models.db :reload-all)
movies
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(load-movies movies-data)
movies
@movies
(use 'mooviefishsrv.models.db :reload-all)
(load-movies movies-data)
(use 'mooviefishsrv.models.db :reload-all)
(load-movies movies-data)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(load-movies movies-data)
(use 'mooviefishsrv.models.db :reload-all)
(load-movies movies-data)
movies
(use 'mooviefishsrv.models.db :reload-all)
movies
@movies
(load-movies movies-data)
@movies
(get movies 1001)
(get @movies 1001)
(use 'mooviefishsrv.models.db :reload-all)
(get @movies 1001)
(load-movies movies-data)
(get @movies 1001)
(get-movie "ru" "1001")
(val @movies)
(vals @movies)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(load-movies-data)
@movies
(get-movies "en")
(movie-count)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(load-movies-data)
(get-movie "en" "1001")
(get-movie "ru" "1001")
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "11111" "1001")
(def aa (aquire-movie "11111" "1001"))
(:id aa)
(:permission aa)
(:did aa)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" "1001")
(get :a #{})
(get :a #{} :b)
(def aa #{})
(update-in [:a] (get :a #{} :b))
(update-in [:a] aa (get :a #{} :b))
(update-in aa [:a] (get :a #{} :b))
(update-in #{} [:a] (get :a #{} :b))
(update-in #{} [:a] "aa")
(update-in #{:a "ss"} [:a] "aa")
(update-in {:a "ss"} [:a] "aa")
(assoc {:a "ss"} :a "bb")
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" "1001")
users
@users
