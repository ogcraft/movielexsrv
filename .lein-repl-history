(first (clojurewerkz.welle.buckets/keys-in conn "votes.bucket"))
(clojurewerkz.welle.buckets/fetch conn 1001)
(clojurewerkz.welle.buckets/fetch conn "1001")
(:result (clojurewerkz.welle.buckets/fetch conn "1001"))
(:result (clojurewerkz.welle.buckets/fetch conn votes-bucket "1001"))
(:result (clojurewerkz.welle.kv/fetch conn votes-bucket "1001"))
(:result (clojurewerkz.welle.kv/fetch conn "votes.bucket" "1001"))
(clojurewerkz.welle.kv/fetch conn "votes.bucket" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(clojurewerkz.welle.kv/delete conn "votes.bucket" "1001")
(translation-vote "en" "11" "1001")
(clojurewerkz.welle.kv/delete conn "votes.bucket" "1001")
(clojurewerkz.welle.kv/fetch conn "votes.bucket" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(clojurewerkz.welle.kv/fetch conn "votes.bucket" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(translation-vote "en" "11" "1002")
(translation-vote "ru" "11" "1002")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "ru" "11" "1002")
(translation-vote "ar" "11" "1002")
(translation-vote "ar" "11" 1002)
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "ar" "11" 1002)
(get translation-vote "en" "11" "1002")
(get-translation-vote "en" "11" "1002")
(use 'mooviefishsrv.models.db :reload-all)
(get-translation-vote "en" "11" "1002")
(get-translation-vote "ww" "11" "1002")
(use 'mooviefishsrv.models.db :reload-all)
(get-translation-vote "ww" "11" "1002")
(get-translation-vote "1002")
(get-translation-vote "1004")
(get-translation-vote "1001")
(translation-vote "ar" "11" 1001)
(translation-vote "ar" "11" "1001")
(get-translation-vote "1001")
(use 'mooviefishsrv.models.db :reload-all)
(get-translation-vote "1001")
(get-translation-vote "1006")
(get-translation-vote "1001")
(get-translation-vote "1002")
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(add-user 11)
(add-user 12)
(add-user-db 11)
(add-user-db "11")
(users-bucket-create)
(add-user-db "11")
(use 'mooviefishsrv.models.db :reload-all)
(add-user-db "11")
(use 'mooviefishsrv.models.db :reload-all)
(add-user-db "11")
(use 'mooviefishsrv.models.db :reload-all)
(add-user-db "11")
(add-user-db "12")
(add-user-db "13")
(clojurewerkz.welle.buckets/keys-in users-bucket)
(clojurewerkz.welle.buckets/keys-in conn users-bucket)
(first (clojurewerkz.welle.buckets/keys-in conn users-bucket))
(list (clojurewerkz.welle.buckets/keys-in conn users-bucket))
(use 'mooviefishsrv.models.db :reload-all)
(count (clojurewerkz.welle.buckets/keys-in conn users-bucket))
(next (clojurewerkz.welle.buckets/keys-in conn users-bucket))
(first (clojurewerkz.welle.buckets/keys-in conn users-bucket))
((clojurewerkz.welle.buckets/keys-in conn users-bucket) 0)
(use 'mooviefishsrv.models.db :reload-all)
(clojurewerkz.welle.kv/index-query conn users-bucket :data-type "user")
(use 'mooviefishsrv.models.db :reload-all)
(query-users-db)
(count (query-users-db))
(use 'mooviefishsrv.models.db :reload-all)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(query-users-db)
(use 'mooviefishsrv.models.db :reload-all)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(query-users-db)
(add-user-db "14")
(query-users-db)
(use 'mooviefishsrv.models.db :reload-all)
(update-users-with-movie-db 11 1001)
(update-users-with-movie-db "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(update-users-with-movie-db "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(update-users-with-movie-db "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(update-users-with-movie-db "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(update-users-with-movie-db "11" "1001")
(update-users-with-movie-db "13" "1001")
(update-users-with-movie-db "13" "1002")
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(get-stats)
(load-movies-data)
(get-stats)
(acquire-movie 11 1001)
(acquire-movie "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(get-stats)
(load-movies-data)
(get-stats)
(acquire-movie "11" "1001")
(query-users)
(acquire-movie "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(acquire-movie "11" "1001")
(acquire-movie "15" "1001")
(query-users)
(acquire-movie "15" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(acquire-movie "15" "1001")
(query-users)
(acquire-movie "17" "1001")
(query-users)
(clojurewerkz.welle.kv/index-query conn users-bucket :data-type "user")
(clojurewerkz.welle.kv/fetch conn users-bucket "15")
(clojurewerkz.welle.kv/fetch conn users-bucket "14")
(acquire-movie "17" "1001")
(acquire-movie "18" "1001")
(clojurewerkz.welle.kv/fetch conn users-bucket "18")
(clojurewerkz.welle.kv/store conn users-bucket did {} 
{:content-type "application/clojure" 
:indexes {:data-type "user"}}
(query-users)
(clojurewerkz.welle.kv/fetch conn users-bucket "19" {} {:content-type "application/clojure" :indexes {:data-type "user"}})
(clojurewerkz.welle.kv/store conn users-bucket "19" {} {:content-type "application/clojure" :indexes {:data-type "user"}})
(clojurewerkz.welle.kv/fetch conn users-bucket "19")
(use 'mooviefishsrv.models.db :reload-all)
(add-user "20")
(clojurewerkz.welle.kv/fetch conn users-bucket "20")
(add-user "20")
(use 'mooviefishsrv.models.db :reload-all)
(acquire-movie "18" "1001")
(acquire-movie "100" "1001")
(query-users)
(clojurewerkz.welle.kv/fetch conn users-bucket "100")
(clojurewerkz.welle.kv/delete conn users-bucket "100")
(clojurewerkz.welle.kv/delete conn users-bucket "11")
(clojurewerkz.welle.kv/delete conn users-bucket "12")
(clojurewerkz.welle.kv/delete conn users-bucket "13")
(clojurewerkz.welle.kv/delete conn users-bucket "14")
(clojurewerkz.welle.kv/delete conn users-bucket "15")
(clojurewerkz.welle.kv/delete conn users-bucket "16")
(clojurewerkz.welle.kv/delete conn users-bucket "17")
(query-users)
(clojurewerkz.welle.kv/delete conn users-bucket "20")
(clojurewerkz.welle.kv/delete conn users-bucket "219")
(clojurewerkz.welle.kv/delete conn users-bucket "19")
(query-users)
(use 'mooviefishsrv.models.db :reload-all)
(query-users)
(acquire-movie "10" "1001")
(query-users)
(acquire-movie "10" "1001")
(query-users)
(acquire-movie "10" "1001")
(acquire-movie "11" "1001")
(query-users)
(acquire-movie "12" "1001")
(query-users)
(use 'mooviefishsrv.models.db :reload-all)
(query-users)
(acquire-movie "12" "1001")
(query-users)
(acquire-movie "13" "1001")
(query-users)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(load-movies-data)
(prn @movies)
(get-movie en)
(get-movie "en")
(get-movies "en")
(get-movie "en" "1001")
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(prn @movies)
(quit)
*cwd*
(:require [me.raynes.fs :refer :all])
(use 'me.raynes.fs :reload-all)
*cwd*
(glob "*")
(glob "../*")
(glob "*")
(glob "..\*")
(glob "..\\*")
(list-dir *cwd*)
(list-dir (parent *cwd*)))
(list-dir (parent *cwd*))
(count (list-dir (parent *cwd*)))
(split *cwd*)
(walk size *cwd*)
(with-cwd "c:\\" list-dir)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(load-movies-data)
(prn @movies)
(load-movies-data)
(prn @movies)
(load-movies-data)
(prn @movies)
(load-movies-data)
(prn @movies)
git commit 
(quit)
(use 'mooviefishsrv.tools.sitegen :reload-all)
(html/deftemplate index-template "site-template/ru/index.html" [])
(net.cgrand.enlive-html/deftemplate index-template "site-template/ru/index.html" [])
(quit)
(in-ns 'mooviefishsrv.tools.sitegen)
(prn index-html)
(quit)
(in-ns 'mooviefishsrv.tools.sitegen)
(prn index-html)
(quit)
(use 'mooviefishsrv.tools.sitegen :reload-all)
index-html
(sip index-html)
(.exists (clojure.java.io/as-file index-html))
(.exists (clojure.java.io/as-file cinema-html))
(use 'mooviefishsrv.tools.sitegen :reload-all)
(file-exists? cinema-html)
(use 'mooviefishsrv.tools.sitegen :reload-all)
(quit)
(use 'mooviefishsrv.tools.sitegen :reload-all)
(ttt)
(use 'mooviefishsrv.tools.sitegen :reload-all)
(ttt)
(use 'mooviefishsrv.tools.sitegen :reload-all)
(quit)
(use 'mooviefishsrv.tools.sitegen :reload-all)
(ttt)
(select [:title] (ttt))
(html/select [:title] (ttt))
(net.cgrand.enlive-html/select [:title] (ttt))
(net.cgrand.enlive-html/select [:div] (ttt))
(net.cgrand.enlive-html/select (ttt) [:title])
(net.cgrand.enlive-html/select (ttt) [:movie-entry])
(use 'mooviefishsrv.tools.sitegen :reload-all)
(ttt)
(str (ttt))
(doseq (ttt))
post-page
(doseq post-page)
(net.cgrand.enlive-html/select post-page [:title])
(reduce str (post-page []))
(reduce str (post-page [:title ""]))
(reduce str (post-page #()))
(str post-page)
((str post-page))
(reduce str (post-page))
(use 'mooviefishsrv.tools.sitegen :reload-all)
(ttt)
(db/load-movies-data)
(mooviefishsrv.models.db/load-movies-data)
(ttt)
(use 'mooviefishsrv.tools.sitegen :reload-all)
(ttt)
(use 'mooviefishsrv.tools.sitegen :reload-all)
(quit)
(use 'mooviefishsrv.tools.sitegen :reload-all)
(def rr (ttt))
rr
(pprint rr)
(select rr [:movie-entry])
(net.cgrand.enlive-html/select rr [:movie-entry])
(net.cgrand.enlive-html/select rr [:class.movie-entry])
(net.cgrand.enlive-html/select rr [:div.movie-entry])
(first (net.cgrand.enlive-html/select rr [:div.movie-entry]))
(count (net.cgrand.enlive-html/select rr [:div.movie-entry]))
(count (net.cgrand.enlive-html/select rr [:ul.left-movies.movie-entry]))
(count (net.cgrand.enlive-html/select rr [:ul.left-movies]))
(count (net.cgrand.enlive-html/select rr [:ul.right-movies]))
(count (net.cgrand.enlive-html/select rr [:ul.left-movies :div.movie-entry]))
(net.cgrand.enlive-html/select rr [:ul.left-movies :div.movie-entry])
(first (net.cgrand.enlive-html/select rr [:ul.left-movies :div.movie-entry]))
(net.cgrand.enlive-html/select (first (net.cgrand.enlive-html/select rr [:ul.left-movies :div.movie-entry]) [:title])
)
(net.cgrand.enlive-html/select (first (net.cgrand.enlive-html/select rr [:ul.left-movies :div.movie-entry])) [:title])
(sip aaa.html (first (net.cgrand.enlive-html/select rr [:ul.left-movies :div.movie-entry])))
(spit aaa.html (first (net.cgrand.enlive-html/select rr [:ul.left-movies :div.movie-entry])))
(spit "aaa.html" (first (net.cgrand.enlive-html/select rr [:ul.left-movies :div.movie-entry])))
(net.cgrand.enlive-html/content (first (net.cgrand.enlive-html/select rr [:ul.left-movies :div.movie-entry])))
(apply str (first (net.cgrand.enlive-html/select rr [:ul.left-movies :div.movie-entry])))
(spit "aaa.html" (apply str (first (net.cgrand.enlive-html/select rr [:ul.left-movies :div.movie-entry]))))
(apply str (first (net.cgrand.enlive-html/select rr [:ul.left-movies :div.movie-entry])))
(apply str (net.cgrand.enlive-html/select rr [:ul.left-movies :div.movie-entry]))
(net.cgrand.enlive-html/text (net.cgrand.enlive-html/select rr [:ul.left-movies :div.movie-entry]))
(net.cgrand.enlive-html/text (first (net.cgrand.enlive-html/select rr [:ul.left-movies :div.movie-entry])))
(spit "aaa.html" (net.cgrand.enlive-html/texts (first (net.cgrand.enlive-html/select rr [:ul.left-movies :div.movie-entry]))))
(spit "aaa.html" (apply net.cgrand.enlive-html/text (first (net.cgrand.enlive-html/select rr [:ul.left-movies :div.movie-entry]))))
(spit "aaa.html" (apply #net.cgrand.enlive-html/text (first (net.cgrand.enlive-html/select rr [:ul.left-movies :div.movie-entry]))))
(spit "aaa.html" (str (net.cgrand.enlive-html/texts (first (net.cgrand.enlive-html/select rr [:ul.left-movies :div.movie-entry])))))
(str (net.cgrand.enlive-html/texts (first (net.cgrand.enlive-html/select rr [:ul.left-movies :div.movie-entry]))))
(str (net.cgrand.enlive-html/text (first (net.cgrand.enlive-html/select rr [:ul.left-movies :div.movie-entry]))))
(str (net.cgrand.enlive-html/text (net.cgrand.enlive-html/select rr [:ul.left-movies :div.movie-entry])))
(str (net.cgrand.enlive-html/text (first (net.cgrand.enlive-html/select rr [:ul.left-movies :div.movie-entry]))))
(spit "aaa.html" (str (net.cgrand.enlive-html/texts (first (net.cgrand.enlive-html/select rr [:ul.left-movies :div.movie-entry])))))
(str (net.cgrand.enlive-html/text (net.cgrand.enlive-html/select rr [:ul.left-movies :div.movie-entry])))
(str (net.cgrand.enlive-html/texts (first (net.cgrand.enlive-html/select rr [:ul.left-movies :div.movie-entry]))))
(str (net.cgrand.enlive-html/text (first (net.cgrand.enlive-html/select rr [:ul.left-movies :div.movie-entry]))))
(spit "aaa.html" (str (net.cgrand.enlive-html/text (first (net.cgrand.enlive-html/select rr [:ul.left-movies :div.movie-entry])))))
(spit "aaa.html" (str (net.cgrand.enlive-html/html (first (net.cgrand.enlive-html/select rr [:ul.left-movies :div.movie-entry])))))
(str (net.cgrand.enlive-html/html (net.cgrand.enlive-html/select rr [:ul.left-movies :div.movie-entry])))
(str (net.cgrand.enlive-html/html (first (net.cgrand.enlive-html/select rr [:ul.left-movies :div.movie-entry]))))
(apply net.cgrand.enlive-html/text (first (net.cgrand.enlive-html/select rr [:ul.left-movies :div.movie-entry]))))
(apply net.cgrand.enlive-html/text (net.cgrand.enlive-html/select rr [:ul.left-movies :div.movie-entry])))
(apply net.cgrand.enlive-html/text (net.cgrand.enlive-html/select rr [:ul.left-movies :div.movie-entry]))
(first (net.cgrand.enlive-html/select rr [:ul.left-movies :div.movie-entry]))
(def aa (first (net.cgrand.enlive-html/select rr [:ul.left-movies :div.movie-entry])))
aa
(net.cgrand.enlive-html/html aa)
(net.cgrand.enlive-html/html-content aa)
(str (net.cgrand.enlive-html/html-content aa))
(use 'mooviefishsrv.tools.sitegen :reload-all)
(ttt)
(quit)
(ns screenscraping
  (:use net.cgrand.enlive-html)
  (:import java.net.URL))
(-> "http://www.penny-arcade.com/comic/" URL. html-resource 
  (select [:body :img]) first :attrs :src) 
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(load-movies-data)
(get-movies-full "en" "active")
(get-movies-full "en" "new")
(get-movies "en")
(count (get-movies "en"))
(use 'mooviefishsrv.models.db :reload-all)
(get-movies "en" "active")
(load-movies-data)
(get-movies "en" "active")
(get-movies "en" "new")
(use 'mooviefishsrv.models.db :reload-all)
(load-movies-data)
(get-movies-new "en")
(get-movies-active "en")
(count (get-movies-active "en"))
(count (get-movies-new "en"))
(use 'mooviefishsrv.models.db :reload-all)
(load-movies-data)
(count (get-movies-full "en"))
(count (get-movies-full "new"))
(count (get-movies-full "active"))
(load-movies-data)
mooviefishsrv.tools.sitegen/ttt
(:use mooviefishsrv.tools.sitegen :reload-all)
(:use 'mooviefishsrv.tools.sitegen :reload-all)
(use 'mooviefishsrv.tools.sitegen :reload-all)
(ttt)
(use 'mooviefishsrv.tools.sitegen :reload-all)
(ttt)
(spit "aaa.html (ttt))
)
(spit "aaa.html" (ttt))
(use 'mooviefishsrv.tools.sitegen :reload-all)
(ttt)
(emit* (ttt))
(emit (ttt))
(ttt)
(use 'mooviefishsrv.tools.sitegen :reload-all)
(ttt)
(use 'mooviefishsrv.tools.sitegen :reload-all)
(ttt)
(use 'mooviefishsrv.tools.sitegen :reload-all)
(ttt)
(use 'mooviefishsrv.tools.sitegen :reload-all)
(quit)
(use 'mooviefishsrv.tools.sitegen :reload-all)
(ttt)
(use 'mooviefishsrv.tools.sitegen :reload-all)
(ttt)
(use 'mooviefishsrv.tools.sitegen :reload-all)
(ttt)
(quit)
(use 'mooviefishsrv.tools.sitegen :reload-all)
(ttt)
(spit "aaa.html" (ttt))
(use 'mooviefishsrv.tools.sitegen :reload-all)
(spit "aaa.html" (ttt))
(use 'mooviefishsrv.tools.sitegen :reload-all)
(spit "aaa.html" (ttt))
(use 'mooviefishsrv.tools.sitegen :reload-all)
(quit)
(use 'mooviefishsrv.tools.sitegen :reload-all)
(spit "aaa.html" (ttt))
(use 'mooviefishsrv.tools.sitegen :reload-all)
(spit "aaa.html" (ttt))
(use 'mooviefishsrv.tools.sitegen :reload-all)
(spit "aaa.html" (ttt))
(use 'mooviefishsrv.tools.sitegen :reload-all)
(spit "aaa.html" (ttt))
(use 'mooviefishsrv.tools.sitegen :reload-all)
(spit "aaa.html" (ttt))
(use 'mooviefishsrv.tools.sitegen :reload-all)
(spit "aaa.html" (ttt))
(use 'mooviefishsrv.tools.sitegen :reload-all)
(spit "aaa.html" (ttt))
(use 'mooviefishsrv.tools.sitegen :reload-all)
(spit "aaa.html" (ttt))
(use 'mooviefishsrv.tools.sitegen :reload-all)
(spit "aaa.html" (ttt))
(use 'mooviefishsrv.tools.sitegen :reload-all)
(spit "aaa.html" (ttt))
(quit)
(symbol "ru")
{:ru "aaaaa"}
("ru" {:ru "aaaaa"})
((symbol "ru") {:ru "aaaaa"})
((symbol ":ru") {:ru "aaaaa"})
((symbol "ru") {:ru "aaaaa"})
(symbol ":ru")
(:ru {:ru "aaaaa"})
((symbol ":ru") {:ru "aaaaa"})
({:ru "aaaaa"} (symbol ":ru"))
(symbol ":ru")
(def rr (symbol ":ru"))
(rr {:ru "aaaaa"})
(get rr {:ru "aaaaa"})
(get {:ru "aaaaa"} rr)
rr
(atom "ru")
({:ru "aaaaa"} (atom "ru"))
({:ru "aaaaa"} (atom ":ru"))
({:ru "aaaaa"} (keyword ":ru"))
({:ru "aaaaa"} (keyword "ru"))
((keyword "ru") {:ru "aaaaa"})
(use 'mooviefishsrv.tools.sitegen :reload-all)
(ttt)
(quit)
