(prn @users)
(acquire-movie "111" "1002")
(prn @users)
(quit)
(acquire-movie "111" "1002")
(use 'mooviefishsrv.models.db :reload-all)
(acquire-movie "111" "1002")
(prn @users)
(acquire-movie "111" "1002")
(acquire-movie "111" "1003")
(acquire-movie "111" "1004")
(prn @users)
(acquire-movie "111" "1004")
(prn @users)
(use 'mooviefishsrv.models.db :reload-all)
(prn @users)
(acquire-movie "111" "1004")
(prn @users)
(acquire-movie "111" "1004")
(prn @users)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(acquire-movie "111" "1004")
(prn @users)
(use 'mooviefishsrv.models.db :reload-all)
(acquire-movie "111" "1004")
(prn @users)
(get-in users 111 :mids 1004)
(get-in users [111 :mids 1004])
(get-in users [111 :mids])
(get-in users [111])
(get-in @users [111])
(get-in @users [111 :mids])
(get-in @users [111 :mids 1004])
(use 'mooviefishsrv.models.db :reload-all)
(prn @users)
(acquire-movie "111" "1004")
(prn @users)
(use 'mooviefishsrv.models.db :reload-all)
(prn @users)
(acquire-movie "111" "1004")
(prn @users)
(acquire-movie "111" "1004")
(prn @users)
(acquire-movie "111" "1004")
(prn @users)
(acquire-movie "111" "1004")
(prn @users)
(acquire-movie "111" "1004")
(prn @users)
(use 'mooviefishsrv.models.db :reload-all)
(prn @users)
(acquire-movie "111" "1004")
(prn @users)
(acquire-movie "111" "1004")
(prn @users)
(acquire-movie "111" "1004")
(prn @users)
(use 'mooviefishsrv.models.db :reload-all)
(acquire-movie "111" "1004")
(prn @users)
(acquire-movie "112" "1004")
(prn @users)
(get-movies "en")
(load-movies)
(load-movies-data)
(get-movies "en")
(quit)
(use 'mooviefishsrv.routes.home  :reload-all)
(get-movies "en")
(prn (get-movies "en"))
(:handle-ok (get-movies "en"))
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(add-user 11)
(add-user 22)
(use 'mooviefishsrv.models.db :reload-all)
(add-user 11)
(add-user 22)
(add-movie-to-user1 11 1001)
(add-movie-to-user1 11 1002)
(add-movie-to-user1 11 1003)
(add-movie-to-user1 11 1004)
(use 'mooviefishsrv.models.db :reload-all)
(add-user 11)
(add-movie-to-user1 11 1001)
(def m (get-in @users [11 :mids mid]))
(def m (get-in @users [11 :mids 1001]))
m
(def u (get-in @users [11]))
u
(add-user 22)
(def m (get-in @users [11 :mids 1001])
)
m
(use 'mooviefishsrv.models.db :reload-all)
(add-user 11)
(def u (@users 11))
u
(def ms (u :mids))
ms
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(add-user 11)
(@users 11)
(:mids (@users 11))
(use 'mooviefishsrv.models.db :reload-all)
(add-user 11)
(add-movie-to-user2 11 1004)
(:mids (@users 11))
(prn (:mids (@users 11)))
(use 'mooviefishsrv.models.db :reload-all)
(add-movie-to-user2 11 1004)
(add-user 11)
(add-movie-to-user2 11 1004)
(use 'mooviefishsrv.models.db :reload-all)
(add-user 11)
(add-movie-to-user2 11 1004)
(use 'mooviefishsrv.models.db :reload-all)
(add-movie-to-user2 11 1004)
(add-user 11)
(add-movie-to-user2 11 1004)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(add-user 11)
(add-movie-to-user2 11 1004)
(use 'mooviefishsrv.models.db :reload-all)
(add-user 11)
(add-movie-to-user2 11 1004)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(add-user 11)
(use 'mooviefishsrv.models.db :reload-all)
(add-user 11)
(add-movie-to-user2 11 1004)
(use 'mooviefishsrv.models.db :reload-all)
(add-user 11)
(add-movie-to-user2 11 1004)
(use 'mooviefishsrv.models.db :reload-all)
(add-user 11)
(add-movie-to-user2 11 1004)
(use 'mooviefishsrv.models.db :reload-all)
(add-user 11)
(add-movie-to-user2 11 1004)
(conj [] 1)
(use 'mooviefishsrv.models.db :reload-all)
(add-user 11)
(add-movie-to-user2 11 1004)
(use 'mooviefishsrv.models.db :reload-all)
(add-user 11)
(add-movie-to-user2 11 1004)
(use 'mooviefishsrv.models.db :reload-all)
(add-user 11)
(add-movie-to-user2 11 1004)
(use 'mooviefishsrv.models.db :reload-all)
(add-user 11)
(add-movie-to-user2 11 1004)
(use 'mooviefishsrv.models.db :reload-all)
(add-user 11)
(add-movie-to-user2 11 1004)
(use 'mooviefishsrv.models.db :reload-all)
(add-user 11)
(add-movie-to-user3 11 1004)
(use 'mooviefishsrv.models.db :reload-all)
(add-user 11)
(add-movie-to-user3 11 1004)
(use 'mooviefishsrv.models.db :reload-all)
(add-user 11)
(update-users-with-movie 11 1004)
(prn @users)
(update-users-with-movie1 11 1004)
(use 'mooviefishsrv.models.db :reload-all)
(add-user 11)
(update-users-with-movie1 11 1004)
(prn @users)
(use 'mooviefishsrv.models.db :reload-all)
(prn @users)
(add-user 11)
(update-users-with-movie1 11 1004)
(prn @users)
(update-users-with-movie1 11 1004)
(prn @users)
(use 'mooviefishsrv.models.db :reload-all)
(update-users-with-movie1 11 1004)
(prn @users)
(update-users-with-movie1 11 1004)
(prn @users)
(update-users-with-movie1 11 1004)
(update-users-with-movie1 11 1001)
(prn @users)
(update-users-with-movie1 11 1001)
(use 'mooviefishsrv.models.db :reload-all)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(prn @users)
(update-users-with-movie 11 1001)
(prn @users)
(add-user 11)
(update-users-with-movie 11 1001)
(prn @users)
(update-users-with-movie 11 1001)
(use 'mooviefishsrv.models.db :reload-all)
(prn @users)
(update-users-with-movie 11 1001)
(prn @users)
(update-users-with-movie 11 1001)
(update-users-with-movie 12 1001)
(prn @users)
(update-users-with-movie 13 1001)
(prn @users)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(update-users-with-movie 11 1001)
(prn @users)
(update-users-with-movie 11 1001)
(update-users-with-movie 12 1001)
(update-users-with-movie 12 1002)
(store-users "mm")
(use 'mooviefishsrv.models.db :reload-all)
(prn @users)
(store-users users-data)
(use 'mooviefishsrv.models.db :reload-all)
(store-users users-data)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(store-users users-data)
(use 'mooviefishsrv.models.db :reload-all)
(store-users users-data)
(use 'mooviefishsrv.models.db :reload-all)
(store-users users-data)
(update-users-with-movie 12 1002)
(store-users users-data)
(use 'mooviefishsrv.models.db :reload-all)
(update-users-with-movie 12 1002)
(store-users users-data)
(use 'mooviefishsrv.models.db :reload-all)
(store-users users-data)
(update-users-with-movie 12 1002)
(store-users users-data)
(use 'mooviefishsrv.models.db :reload-all)
(store-users users-data)
(update-users-with-movie 12 1002)
(store-users users-data)
(use 'mooviefishsrv.models.db :reload-all)
(store-users users-data)
(use 'mooviefishsrv.models.db :reload-all)
(store-users users-data)
(update-users-with-movie 12 1002)
(store-users users-data)
(update-users-with-movie 11 1002)
(update-users-with-movie 13 1002)
(store-users users-data)
(use 'mooviefishsrv.models.db :reload-all)
(store-movies "data/aaa.data")
(load-movies movies-data)
(store-movies "data/aaa.data")
(use 'mooviefishsrv.models.db :reload-all)
(load-movies movies-data)
(store-movies "data/aaa.data")
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(update-users-with-movie 13 1002)
(update-users-with-movie 11 1002)
(prn @users)
(fipp @users)
(def uuu (fipp @users))
uuu
(fipp @movies)
(load-movies-data)
(fipp @movies)
(fipp @users)
(use 'mooviefishsrv.models.db :reload-all)
(update-users-with-movie 11 1002)
(update-users-with-movie 12 1002)
(update-users-with-movie 13 1002)
(store-users users-data)
(load-users-data)
time/naow
(time/now)
(clj.time.core/now)
(clj-time.core/now)
(clj-time.formaters/show-formaters)
(clj-time.format/show-formaters)
(clj-time.format/show-formatters)
(clj-time.format/unparse :date-hour-minute-second (clj.time.core/now))
(clj-time.format/unparse :date-hour-minute-second (clj-time.core/now))
(clj-time.format/unparse clj-format/date-hour-minute-second (clj-time.core/now))
(clj-time.format/unparse clj-time.format/date-hour-minute-second (clj-time.core/now))
(clj-time.format/unparse (clj-time.format/formatters :basic-date-time) (clj-time.core/now))
(clj-time.format/unparse (clj-time.format/formatters :date-hour-minute-second) (clj-time.core/now))
(use 'mooviefishsrv.models.db :reload-all)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(update-users-with-movie 13 1002)
(update-users-with-movie 14 1002)
(update-users-with-movie 15 1002)
(ffip @users)
(store-users users-data)
(load-users users-data)
(use 'mooviefishsrv.models.db :reload-all)
(prn @users)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(prn @users)
(load-users users-data)
(prn @users)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(load-users-data)
(update-users-with-movie 117 1002)
(update-users-with-movie 117 1005)
(update-users-with-movie 117 1007)
(store-users-data)
(load-users-data)
(prn  @users)
(update-users-with-movie 117 1007)
(use 'mooviefishsrv.models.db :reload-all)
(prn  @users)
(load-users-data)
(prn  @users)
(update-users-with-movie 11 1007)
(store-users-data)
(update-users-with-movie 11 1007)
(use 'mooviefishsrv.models.db :reload-all)
(load-movies-data)
(prn @movies)
(quit)
(use 'clojurewerkz.welle.core :as wc)
(use 'clojurewerkz.welle.core)
(connect)
(let [conn (wc/connect)]
  ;; creates a new bucket with default properties
  (wb/create conn "things"))
(def conn (connect))
(create conn "things")
(quit)
)/×•×Ÿ×?(
()
(quit)
(use 'mooviefishsrv.models.db :reload-all)
db
(wb/list)
(clojurewerkz.welle.buckets/list)
(clojurewerkz.welle.buckets/list db)
(use 'mooviefishsrv.models.db :reload-all)
(clojurewerkz.welle.buckets/list conn)
votes_bucket
(clojurewerkz.welle.buckets/list conn)
(use 'mooviefishsrv.models.db :reload-all)
(clojurewerkz.welle.buckets/list conn)
(clojurewerkz.welle.buckets/create conn "aaa")
(clojurewerkz.welle.buckets/list conn)
votes-bucket
votes_bucket
(quit)
(use 'mooviefishsrv.models.db :reload-all)
votes-bucket
(clojurewerkz.welle.buckets/keys-in conn votes-bucket)
(clojurewerkz.welle.buckets/keys-in conn "votes.bucket")
(first (clojurewerkz.welle.buckets/keys-in conn "votes.bucket"))
(clojurewerkz.welle.buckets/fetch conn 1001)
(clojurewerkz.welle.buckets/fetch conn "1001")
(:result (clojurewerkz.welle.buckets/fetch conn "1001"))
(:result (clojurewerkz.welle.buckets/fetch conn votes-bucket "1001"))
(:result (clojurewerkz.welle.kv/fetch conn votes-bucket "1001"))
(:result (clojurewerkz.welle.kv/fetch conn "votes.bucket" "1001"))
(clojurewerkz.welle.kv/fetch conn "votes.bucket" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(clojurewerkz.welle.kv/delete conn "votes.bucket" "1001")
(translation-vote "en" "11" "1001")
(clojurewerkz.welle.kv/delete conn "votes.bucket" "1001")
(clojurewerkz.welle.kv/fetch conn "votes.bucket" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(clojurewerkz.welle.kv/fetch conn "votes.bucket" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "en" "11" "1001")
(translation-vote "en" "11" "1002")
(translation-vote "ru" "11" "1002")
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "ru" "11" "1002")
(translation-vote "ar" "11" "1002")
(translation-vote "ar" "11" 1002)
(use 'mooviefishsrv.models.db :reload-all)
(translation-vote "ar" "11" 1002)
(get translation-vote "en" "11" "1002")
(get-translation-vote "en" "11" "1002")
(use 'mooviefishsrv.models.db :reload-all)
(get-translation-vote "en" "11" "1002")
(get-translation-vote "ww" "11" "1002")
(use 'mooviefishsrv.models.db :reload-all)
(get-translation-vote "ww" "11" "1002")
(get-translation-vote "1002")
(get-translation-vote "1004")
(get-translation-vote "1001")
(translation-vote "ar" "11" 1001)
(translation-vote "ar" "11" "1001")
(get-translation-vote "1001")
(use 'mooviefishsrv.models.db :reload-all)
(get-translation-vote "1001")
(get-translation-vote "1006")
(get-translation-vote "1001")
(get-translation-vote "1002")
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(add-user 11)
(add-user 12)
(add-user-db 11)
(add-user-db "11")
(users-bucket-create)
(add-user-db "11")
(use 'mooviefishsrv.models.db :reload-all)
(add-user-db "11")
(use 'mooviefishsrv.models.db :reload-all)
(add-user-db "11")
(use 'mooviefishsrv.models.db :reload-all)
(add-user-db "11")
(add-user-db "12")
(add-user-db "13")
(clojurewerkz.welle.buckets/keys-in users-bucket)
(clojurewerkz.welle.buckets/keys-in conn users-bucket)
(first (clojurewerkz.welle.buckets/keys-in conn users-bucket))
(list (clojurewerkz.welle.buckets/keys-in conn users-bucket))
(use 'mooviefishsrv.models.db :reload-all)
(count (clojurewerkz.welle.buckets/keys-in conn users-bucket))
(next (clojurewerkz.welle.buckets/keys-in conn users-bucket))
(first (clojurewerkz.welle.buckets/keys-in conn users-bucket))
((clojurewerkz.welle.buckets/keys-in conn users-bucket) 0)
(use 'mooviefishsrv.models.db :reload-all)
(clojurewerkz.welle.kv/index-query conn users-bucket :data-type "user")
(use 'mooviefishsrv.models.db :reload-all)
(query-users-db)
(count (query-users-db))
(use 'mooviefishsrv.models.db :reload-all)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(query-users-db)
(use 'mooviefishsrv.models.db :reload-all)
(quit)
