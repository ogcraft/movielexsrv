(:use 'movielexsrv.tools.sitegen :reload-all)
(:use 'movielexsrv.tools.utils :reload-all)
(:use movielexsrv.tools.sitegen :reload-all)
(:use movielexsrv.tools.utils :reload-all)
(clojurewerkz.welle.kv/fetch (get-state :conn) users-bucket "10") 
(clojurewerkz.welle.kv/fetch (get-state :conn) users-bucket "11") 
(clojurewerkz.welle.kv/modify (get-state :conn) users-bucket "11" #(%)) 
(clojurewerkz.welle.kv/modify (get-state :conn) users-bucket "11" #((prb %) %)) 
(clojurewerkz.welle.kv/modify (get-state :conn) users-bucket "11" #((prn %) %)) 
(clojurewerkz.welle.kv/modify (get-state :conn) users-bucket "11") 
(file-exists? cinema-html)
(first (query-users))
(gen-product-list-csv ".")
(gen-product-records mvs)
(gen-product-records)
(get (fetch-user  "11") [:user-data :appver])
(get (fetch-user "11") [:user-data])
(get u [:user-data :appver])
(get-in  u [:user-data :appver])
(get-in (fetch-user "11") [:user-data :account] )
(get-in [:user-data :account] (fetch-user "11"))
(get-in u [:user-data :appver])
(get-stats)
(gethostname)
(import 'java.lang.Runtime)
(init-local-repl)
(init-prodlistgen)
(map movie->csv mvs)
(movie->csv m)
(movielex.tools.utils/ver->int (get u [:user-data :appver]))
(movielexsrv.tools.utils/gethostname)
(movielexsrv.tools.utils/ver->int (get u [:user-data :appver]))
(mvs "kp461206")
(prn (clojure.string/escape "I want 1 < 2 as HTML, & other good things."  {\< "<", \> ">", \& "&"}))
(prn @config)
(prn @db/movies)
(prn @movielexsrv.models.db/movies)
(prn @movies)
(prn @movilexsrv.models.db/movies)
(prn config)
(prn db/movies)
(prn movilexsrv.models.db/movies)
(put-user "10" "{\"account\": \"xyz\"}")
(put-user "10" "{\"device_id\":\"11\"}" )
(put-user "10" "{\"device_id\":\"12\"}" )
(put-user "10" {:account "xyz", :device_id "11", :os "android", :osver "4.2.2", :appver "1.0.0", :amatchver "1.35"})
(put-user "10")
(put-user "11" "{\"\": \"11\"}")
(put-user "11" "{\"account\": \"xyz\", \"device_id\" : \"1\"}" )
(put-user "11" "{\"account\": \"xyz\", \"device_id\":\"1\"}")
(put-user "11" "{\"account\": \"xyz\"}")
(put-user "11" "{\"device_id\":\"11\"}" )
(put-user "11" '{"account":"xyz","device_id":"11","os":"android","osver":"4.2.2","appver":"1.0.0","amatchver":"1.35"}' )
(put-user "15" "{\"device_id\":\"11\"}" )
(query-users)
(quit)
(str (. (Runtime/getRuntime) exec "hostname"))
(use 'movielexsrv.models.db :reload-all)
(use 'movielexsrv.tools.prodlistgen :reload-all)
(use 'movielexsrv.tools.utils :reload-all)
(utils/ver->int (get u [:user-data :appver]))
(validate-user "11")
(vals mvs)
(use 'movielexsrv.tools.sitegen :reload-all)
(load-movies-and-generate-cinema "ru" ".")
(quit)
(use 'movielexsrv.models.db :reload-all)
(init-local-repl)
(query-users)
(db/render-users-html (db/query-users))
(render-users-html (query-users))
(use 'movielexsrv.models.db :reload-all)
(render-users-html (query-users))
(get-stats)
(init-local-repl)
(render-users-html (query-users))
(use 'movielexsrv.models.db :reload-all)
(init-local-repl)
(collect-users (query-users))
(use 'movielexsrv.models.db :reload-all)
(init-local-repl)
(collect-users (query-users))
(clojure.pprint/pprint (collect-users (query-users)))
(collect-users (query-users))
(type (collect-users (query-users)))
(first (collect-users (query-users)))
(second (collect-users (query-users)))
(def uuu (collect-users (query-users)))
uuu
(into {} (for [u uuu] (assoc (get-in u [:user-data :account]) u)))
(into {} (for [u uuu] [(get-in u [:user-data :account]) u]))
(first (into {} (for [u uuu] [(get-in u [:user-data :account]) u])))
(second (into {} (for [u uuu] [(get-in u [:user-data :account]) u])))
(use 'movielexsrv.models.db :reload-all)
(init-local-repl)
(collect-users-by-account (query-users))
(clojure.pprint/pprint (collect-users-by-account (query-users)))
(clojure.pprint/pp (collect-users-by-account (query-users)))
(query-users)
(delete-user "11")
(delete-user "10")
(clojure.pprint/pp (collect-users-by-account (query-users)))
(clojure.pprint/pprint (collect-users-by-account (query-users)))
(collect-users-by-account (query-users))
(use 'movielexsrv.models.db :reload-all)
(init-local-repl)
(collect-users-by-account-device (query-users))
(use 'movielexsrv.models.db :reload-all)
(init-local-repl)
(collect-users-by-account (query-users))
(first (collect-users-by-account (query-users)))
(clojure.pprint/pprint (collect-users-by-account (query-users)))
(def qq (collect-users-by-account (query-users)))
(qq "ogcraft@gmail.com")
(qq "zavitulka@gmail.com")
(use 'movielexsrv.models.db :reload-all)
(init-local-repl)
(clojure.pprint/pprint (collect-users-by-account (query-users)))
(clojure.pprint/pprint (collect-users-by-account-device (query-users)))
(use 'movielexsrv.models.db :reload-all)
(init-local-repl)
(clojure.pprint/pprint (collect-users-by-account-device (query-users)))
(use 'movielexsrv.models.db :reload-all)
(init-local-repl)
(collect-users-by-account (query-users))
(clojure.pprint/pprint (collect-users-by-account-device (query-users)))
(use 'movielexsrv.models.db :reload-all)
(init-local-repl)
(clojure.pprint/pprint (collect-users-by-account-device (query-users)))
(use 'movielexsrv.models.db :reload-all)
(init-local-repl)
(clojure.pprint/pprint (collect-users-by-account-device (query-users)))
(use 'movielexsrv.models.db :reload-all)
(init-local-repl)
(clojure.pprint/pprint (collect-users-by-account-device (query-users)))
(def qq (collect-users-by-account-device (query-users)))
qq
(qq "zavitulka@gmail.com")
qq
(use 'movielexsrv.models.db :reload-all)
(init-local-repl)
(def qq (collect-users-by-account-device (query-users)))
qq
(use 'movielexsrv.models.db :reload-all)
(init-local-repl)
(def qq (collect-users-by-account-device (query-users)))
qq
(use 'movielexsrv.models.db :reload-all)
(init-local-repl)
(def qq (collect-users-by-account-device (query-users)))
qq
(use 'movielexsrv.models.db :reload-all)
(init-local-repl)
(collect-users-by-account-device (query-users))
(use 'movielexsrv.models.db :reload-all)
(init-local-repl)
(collect-users-by-account-device (query-users))
(update-in {} [:a] assoc :b 1)
(update-in {} [:a] assoc :c 2)
(def q {})
q
(update-in q [:a] assoc :c 2)
q
(update-in q [:a] assoc :b 2)
(into {} (update-in q [:a] assoc :b 2))
(into {} (update-in q [:a] assoc :b 3))
(into {} (update-in q [:a] assoc :c 3))
(use 'movielexsrv.models.db :reload-all)
(init-local-repl)
(collect-users-by-account-device (query-users))
(def qq (collect-users-by-account-device (query-users)))
qq
(qq "zavitulka@gmail.com")
(def m {})
(merge m (assoc m :a 1))
(merge m (assoc m :b 2))
(query-users)
(map fetch-user (query-users))
(group-by :account (map fetch-user (query-users)))
(group-by #(get-in % [:user-data :account]) (map fetch-user (query-users)))
(def pp 'clojure.pprint/pprint)
(pprint (group-by #(get-in % [:user-data :account]) (map fetch-user (query-users))))
(def qq (group-by #(get-in % [:user-data :account]) (map fetch-user (query-users))))
(qq "zavitulka@gmail.com")
(first (qq "zavitulka@gmail.com"))
(second (qq "zavitulka@gmail.com"))
(use 'movielexsrv.models.db :reload-all)
(init-local-repl)
(collect-users-by-account-device (query-users))
(use 'movielexsrv.models.db :reload-all)
(init-local-repl)
(render-users-html (query-users))
(use 'movielexsrv.models.db :reload-all)
(init-local-repl)
(render-users-html (query-users))
(use 'movielexsrv.models.db :reload-all)
(init-local-repl)
(render-users-html (query-users))
(use 'movielexsrv.models.db :reload-all)
(init-local-repl)
(render-users-html (query-users))
(use 'movielexsrv.models.db :reload-all)
(init-local-repl)
(render-users-html (query-users))
(use 'movielexsrv.models.db :reload-all)
(init-local-repl)
(render-users-html (query-users))
(quit)
(use 'movielexsrv.models.db :reload-all)
(init-local-repl)
(ttt)
(str (ttt))
(html (ttt))
(hiccup.core/html (ttt))
(clojure.pprint/pprint (hiccup.core/html (ttt)))
(clojure.pprint/pprint (ttt))
(use 'movielexsrv.models.db :reload-all)
(ttt)
(init-local-repl)
(ttt)
(use 'movielexsrv.models.db :reload-all)
(init-local-repl)
(ttt)
(use 'movielexsrv.models.db :reload-all)
(init-local-repl)
(ttt)
(use 'movielexsrv.models.db :reload-all)
(init-local-repl)
(ttt)
(use 'movielexsrv.models.db :reload-all)
(init-local-repl)
(ttt)
(use 'movielexsrv.models.db :reload-all)
(init-local-repl)
(ttt)
(quit)
(use 'movielexsrv.models.db :reload-all)
u1
(vals u1)
(map #([:td %]) (vals u1))
(map #([:td 1]) (vals u1))
(map #(str "<td>" % "</td>") (vals u1))
(with-out-str (map #(str "<td>" % "</td>") (vals u1)))
u1
(map #(str "<td>" % "</td>") (vals u1))
(doall (map #(str "<td>" % "</td>") (vals u1)))
(str (doall (map #(str "<td>" % "</td>") (vals u1))))
(with-out-str (doall (map #(str "<td>" % "</td>") (vals u1)))))
(with-out-str (doall (map #(str "<td>" % "</td>") (vals u1))))
(doall (map #(str "<td>" % "</td>") (vals u1)))
(str (map #(str "<td>" % "</td>") (vals u1)))
(reduce (map #(str "<td>" % "</td>") (vals u1)))
(reduce str (map #(str "<td>" % "</td>") (vals u1)))
(str (reduce str (map #(str "<td>" % "</td>") (vals u1))) "aaaa")
(use 'movielexsrv.models.db :reload-all)
mmm
(use 'movielexsrv.models.db :reload-all)
(get-movie "ru" kp496849)
(get-movie "ru" "kp496849")
(:title (get-movie "ru" "kp496849"))
(init-local-repl)
(load-movies-data)
(:title (get-movie "ru" "kp496849"))
(use 'movielexsrv.models.db :reload-all)
(load-movies-data)
(quit)
(use 'movielexsrv.models.db :reload-all)
(load-movies-data)
(get-movies-active "en")
(quit)
(use 'movielexsrv.models.db :reload-all)
(load-movies-data)
(get-movies-active "en")
(quit)
(use 'movielexsrv.models.db :reload-all)
(load-movies-data)
(query-users)
(init-local-repl)
(query-users)
(render-users-html (query-users))
(use 'movielexsrv.models.db :reload-all)
(init-local-repl)
(load-movies-data)
(render-users-html (query-users))
q
(quit)
(use 'movielexsrv.models.db :reload-all)
(query-users)
(load-movies-data)
(query-users)
(quit)
