(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" d1)
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" d1)
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" d1)
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" d1)
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" d1)
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" d1)
(def movies [
{
:shortname"monsters", 
:descriptions [
{
:lang "en" 
:title "Monsters University", 
:desc "A look at the relationship between Mike and Sulley during their days at Monsters University -- when they weren't necessarily the best of friends.",
 :img "monsters.jpg",
 :year-released "2013"
}
{
:lang "ru" 
:title "Ð£Ð½Ð¸Ð²ÐµÑ€Ñ?Ð¸Ñ‚ÐµÑ‚ Ð¼Ð¾Ð½Ñ?Ñ‚Ñ€Ð¾Ð² (2013)", 
:desc "ÐœÐ°Ð¹Ðº Ð¸ Ð¡Ð°Ð»Ð»Ð¸ â€” Ñ?Ð°Ð¼Ñ‹Ðµ Ð¾Ð¿Ñ‹Ñ‚Ð½Ñ‹Ðµ Ð¿ÑƒÐ³Ð°Ñ‚ÐµÐ»Ð¸ Ð² ÐœÐ¾Ð½Ñ?Ñ‚Ñ€Ð¾Ð¿Ð¾Ð»Ð¸Ñ?Ðµ, Ð½Ð¾ Ñ‚Ð°Ðº Ð±Ñ‹Ð»Ð¾ Ð´Ð°Ð»ÐµÐºÐ¾ Ð½Ðµ Ð²Ñ?ÐµÐ³Ð´Ð°. ÐšÐ¾Ð³Ð´Ð° Ð¾Ð½Ð¸ Ð²Ñ?Ñ‚Ñ€ÐµÑ‚Ð¸Ð»Ð¸Ñ?ÑŒ Ð²Ð¿ÐµÑ€Ð²Ñ‹Ðµ, Ñ?Ñ‚Ð¸ Ð¼Ð¾Ð½Ñ?Ñ‚Ñ€Ñ‹ Ñ‚ÐµÑ€Ð¿ÐµÑ‚ÑŒ Ð´Ñ€ÑƒÐ³ Ð´Ñ€ÑƒÐ³Ð° Ð½Ðµ Ð¼Ð¾Ð³Ð»Ð¸. Â«Ð£Ð½Ð¸Ð²ÐµÑ€Ñ?Ð¸Ñ‚ÐµÑ‚ ÐœÐ¾Ð½Ñ?Ñ‚Ñ€Ð¾Ð²Â» â€” Ð¸Ñ?Ñ‚Ð¾Ñ€Ð¸Ñ? Ð¾ Ñ‚Ð¾Ð¼, ÐºÐ°Ðº Ð½Ð°ÑˆÐ¸ Ñ?Ñ‚Ð°Ñ€Ñ‹Ðµ Ð·Ð½Ð°ÐºÐ¾Ð¼Ñ‹Ðµ Ð¿Ñ€Ð¾ÑˆÐ»Ð¸ Ð¿ÑƒÑ‚ÑŒ Ð¾Ñ‚ Ð²Ð·Ð°Ð¸Ð¼Ð½Ð¾Ð¹ Ð½ÐµÐ¿Ñ€Ð¸Ñ?Ð·Ð½Ð¸ Ðº ÐºÑ€ÐµÐ¿ÐºÐ¾Ð¹ Ð´Ñ€ÑƒÐ¶Ð±Ðµ.",
 :img "monsters.jpg"
 :year-released "2013"
}
]
:fpkeys-file "monsters.fpkeys",
  :translations [
  {
 :lang "ru", 
 :title "Ð ÑƒÑ?Ñ?ÐºÐ¸Ð¹", 
 :desc "From original dvd", 
 :file "monsters-ru.mp3",
 :img nil 
 }
  {
  :lang "he", 
  :title "×¢×‘×¨×™×ª", 
  :desc "From original dvd", 
  :file nil,
  :img nil 
  }
  ]
    }
    {
:shortname "smurfs", 
:descriptions [
{
:lang "en"  
:title "The Smurfs", 
:desc "When the evil wizard Gargamel chases the tiny blue Smurfs out of their village, they tumble from their magical world into New York City.",
 :img "smurfs.jpg",
 :year-released "2011"
}
]
:fpkeys-file "smurfs.fpkeys",
  :translations [
  {
 :lang "ar", 
 :title "Arabic", 
 :desc "From original dvd",
 :file "smurfs-ar.mp3" 
 :img nil 
 }
  {
  :lang "he", 
  :title "×¢×‘×¨×™×ª", 
  :desc "From original dvd",
  :file "smurfs-he.mp3" 
  :img nil 
  }
  ]
   }
   {
:shortname "despicableme2", 
:descriptions [
{
:lan:title "Despicable Me 2", 
:desc "Gru is recruited by the Anti-Villain League to help deal with a powerful new super criminal.",
 :img "despicableme2.jpg",
 :year-released "2013"
}
]
:fpkeys-file "despicableme2.fpkeys",
  :translations [
  {
 :lang "ru", 
 :title "Ð ÑƒÑ?Ñ?ÐºÐ¸Ð¹", 
 :desc "From original dvd",
 :file "despicableme2-ru.mp3" 
 :img nil 
 }
  {
  :lang "he", 
  :title "×¢×‘×¨×™×ª", 
  :desc "From original dvd",
  :file "despicableme2-he.mp3" 
  :img nil 
  }
  ]
   }
   ])
(couch/create-database db)
(use 'com.ashafa.clutch :as couch)
(require 'com.ashafa.clutch :as couch)
(com.ashafa.clutch/create-database db)
(com.ashafa.clutch/bulk-update movies)
(com.ashafa.clutch/bulk-update db movies)
(use 'mooviefishsrv.models.db :reload)
(get-docs)
(first (get-docs))
(get-short-desc "en" (first (get-docs))
)
(get-short-desc "en" (first (get-docs)))
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" (first (get-docs)))
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" (first (get-docs)))
dd
d1
(:translations d1)
(get-docs)
(last (get-docs))
(def d2 (last (get-docs)))
(def t2 (:translations (last (get-docs))))
t2
(first t2)
(update-url-in-translation (first t2))
(use 'mooviefishsrv.models.db :reload)
(update-url-in-translation (first t2))
(update-url-in-translation (nth t2 0))
(update-url-in-translation (nth t2 1))
(update-url-in-translation (nth t2 2))
(def d2 (first (get-docs)))
(def t2 (:translations (first (get-docs))))
(update-url-in-translation (nth t2 0))
(update-url-in-translation (nth t2 1))
(use 'mooviefishsrv.models.db :reload)
(update-url-in-translation (nth t2 1))
(map update-url-in-translation t2)
d1
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" (first get-docs))
(get-short-desc "en" (first (get-docs)))
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" (first (get-movies)))
(first (get-movies))
(:descriptions (first (get-movies)))
(select-desc-by-lang "en" (first (get-movies)))
(select-desc-by-lang "en" (:descriptions (first (get-movies))))
(select-desc-by-lang "ru" (:descriptions (first (get-movies))))
(select-desc-by-lang "ar" (:descriptions (first (get-movies))))
(select-desc-by-lang "aa" (:descriptions (first (get-movies))))
(def dsk1 (:descriptions (first (get-movies))))
dsk1
(use 'mooviefishsrv.models.db :reload)
(def dsk1 (:descriptions (first (get-movies))))
(select-desc-by-lang "aa" (:descriptions (first (get-movies))))
(select-desc-by-lang "en" (:descriptions (first (get-movies))))
(select-desc-by-lang "ru" (:descriptions (first (get-movies))))
(use 'mooviefishsrv.models.db :reload)
(select-desc-by-lang "ru" (:descriptions (first (get-movies))))
(select-desc-by-lang "en" (:descriptions (first (get-movies))))
(select-desc-by-lang "ar" (:descriptions (first (get-movies))))
(use 'mooviefishsrv.models.db :reload)
(select-desc-by-lang "ar" (:descriptions (first (get-movies))))
(use 'mooviefishsrv.models.db :reload)
(select-desc-by-lang "ar" (:descriptions (first (get-movies))))
(select-desc-by-lang "ru" (:descriptions (first (get-movies))))
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" (first (get-movies)))
(make-abs-url "kkk")
(make-abs-url nil)
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" (first (get-movies)))
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" (first (get-movies)))
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" (first (get-movies)))
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" (first (get-movies)))
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" (first (get-movies)))
(use 'mooviefishsrv.models.db :reload)
(get-short-desc "en" (first (get-movies)))
(use 'mooviefishsrv.models.db :reload)
(get-movies "en")
(use 'mooviefishsrv.models.db :reload)
(get-movies "en")
(use 'mooviefishsrv.models.db :reload)
(get-movies "en")
(quit)
(doc in-ns)
(use 'mooviefishsrv.models.db)
(get-movies en)
(get-movies "en")
movies
(prn movies)
(load-file "src/mooviefish/src/models/movies.clj")
(directory ".")
(find-doc "dir")
(find-doc "directory")
(load "movies.clj")
(load "movies")
(classpath)
(find-doc "classpath")
(println (seq (.getURLs (java.lang.ClassLoader/getSystemClassLoader))))
(load "models/movies")
(load "mooviefish.models/movies")
(load "models/movies")
(quit)
(use 'mooviefishsrv.models.db)
(get-movies "en")
(= movies mm)
(diff movies mm)
movies
mm
(typeof "")
(find-doc "equal")
(compare movies mm)
(find-doc "diff")
(quit)
(get-movie "en"  "1001")
{
"
)
(quit)
(get-movie "en"  "1001")
(:use 'mooviefishsrv.models.db :reload-all)
(:use 'mooviefishsrv.models.db)
(get-movie "en"  "1001")
(use 'mooviefishsrv.models.db)
(get-movie  "en" 1001)
(get-movie  "en" "1001")
(load-file "data/users.data")
(prn (load-file "data/users.data"))
(quit)
(use 'mooviefishsrv.models.db)
(wrap-base-url)
(use 'compojure.route)
(quit)
(use 'mooviefishsrv.models.db)
(get-movies "data/movies.data")
(def mm (get-movies "data/movies.data"))
mm
(class mm)
{:a 1 :b 2}
(def zz {:a 1 :b 2} {:a 3 :b 4})
(def zz [{:a 1 :b 2} {:a 3 :b 4}])
zz
(reduce #(:a %1) zz)
(def aa #{})
aa
(assoc aa (:a zz) (first zz))
zz
(for [e zz] [(:a e) e])
(into {} (for [e zz] [(:a e) e]))
(use 'mooviefishsrv.models.db)
(use 'mooviefishsrv.models.db :reload-all)
(load-movies movies-data)
(use 'mooviefishsrv.models.db :reload-all)
movies
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(load-movies movies-data)
movies
@movies
(use 'mooviefishsrv.models.db :reload-all)
(load-movies movies-data)
(use 'mooviefishsrv.models.db :reload-all)
(load-movies movies-data)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(load-movies movies-data)
(use 'mooviefishsrv.models.db :reload-all)
(load-movies movies-data)
movies
(use 'mooviefishsrv.models.db :reload-all)
movies
@movies
(load-movies movies-data)
@movies
(get movies 1001)
(get @movies 1001)
(use 'mooviefishsrv.models.db :reload-all)
(get @movies 1001)
(load-movies movies-data)
(get @movies 1001)
(get-movie "ru" "1001")
(val @movies)
(vals @movies)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(load-movies-data)
@movies
(get-movies "en")
(movie-count)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(load-movies-data)
(get-movie "en" "1001")
(get-movie "ru" "1001")
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "11111" "1001")
(def aa (aquire-movie "11111" "1001"))
(:id aa)
(:permission aa)
(:did aa)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" "1001")
(get :a #{})
(get :a #{} :b)
(def aa #{})
(update-in [:a] (get :a #{} :b))
(update-in [:a] aa (get :a #{} :b))
(update-in aa [:a] (get :a #{} :b))
(update-in #{} [:a] (get :a #{} :b))
(update-in #{} [:a] "aa")
(update-in #{:a "ss"} [:a] "aa")
(update-in {:a "ss"} [:a] "aa")
(assoc {:a "ss"} :a "bb")
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" "1001")
users
@users
(clojure.string/split "Spaces Newlines\n\n" #"\s+")
(bigint "122333444455555666666777777788888888999999999")
(Integer/toString 42 16)
ï¿½
(Integer/toString 42 2)
(java.util.UUID/randomUUID)
(java.util.Date.)
(conj (list 1 2 3) 4 5)
(source defroutes)
(source 'defroutes)
(pprint (loaded-libs))
(dir clojure.main)
(use 'mooviefishsrv.models.db :reload-all)
(dir mooviefishsrv.models.db)
(source movies-data)
(source movies)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" "222")
(count @users)
(aquire-movie "111" "222")
(prn @users)
(aquire-movie "111" "222")
(prn @users)
(aquire-movie "222" "222")
(prn @users)
(use 'mooviefishsrv.models.db :reload-all)
(prn @users)
(aquire-movie "222" "1001")
(aquire-movie "111" "1001")
(prn @users)
ï¿½ï¿½H
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" "1001")
ï¿½ï¿½ï¿½
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" "1001")
(aquire-movie "222" "1001")
(swap! users assoc :a 1)
(swap! users assoc :b 1)
(swap! users assoc :b 2)
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "222" "1001")
(aquire-movie "111" "1001")
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" "1001")
(aquire-movie "112" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" "1001")
(aquire-movie "112" "1001")
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "112" "1001")
(aquire-movie "111" "1001")
(aquire-movie "114" "1001")
(prn @users)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "114" "1001")
(aquire-movie "112" "1001")
(prn @users)
(@users 112)
(:mid (@users 112))
(assoc 1002 (:mid (@users 112)))
(use 'mooviefishsrv.models.db :reload-all)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "112" "1001")
(aquire-movie "114" "1001")
(prn @users)
(conj (:mid (@users 112)) 1001)
(prn @users)
(:mid (@users 112))
((@users 112) :mids)
(conj (:mids (@users 112)) 1001)
(prn @users)
(conj ((@users 112) :mids) 1001)
(prn @users)
(quit)
{a: #{}}
(def aa {a: #{}})
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(prn "aaaaa")
(aquire-movie "114" "1001")
(aquire-movie "113" "1001")
(aquire-movie "112" "1001")
(prn @users)
(assoc-in @users [112 :mids] 1001)
(assoc-in @users [112 :mids] 1002)
(assoc-in @users [112 :mids] 1003)
(assoc-in @users [112 :mids] (conj 1003))
(swap! users assoc-in [112 :mids] 1001)
(swap! users assoc-in [112 :mids] 1002)
(swap! users update-in [112 :mids] conj 1001)
(conj #{} 1001)
(conj #{} 1002)
(conj #{1001} 1002)
(prn @users)
(update-in @users [112 :mid] conj 1001)
(prn @users)
(swap! @users update-in [112 :mid] conj 1001)
(swap! users update-in [112 :mid] conj 1001)
(swap! users update-in [112 :mids] conj 1001)
(update-in @users [112 :mids] conj 1001)
(update-in @users [112 :mids] assoc 1001)
(update-in @users [112 :mids] conj 1001)
(get-in @users [112 :mids])
(prn @users)
(update-in @users [113 :mids] conj 1001)
(update-in @users [113 :mids] conj 1002)
(update-in @users [113 :mids] conj 1001)
(swap! users update-in [114 :mids] conj 1001)
(swap! users update-in [114 :mids] conj 1002)
(swap! users update-in [114 :mids] conj 1004)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(prn  @users)
(aquire-movie "110" "1001")
(aquire-movie "110" "1002")
(aquire-movie "110" "1003")
(aquire-movie "111" "1003")
(aquire-movie "111" "1001")
(prn  @users)
(use 'mooviefishsrv.models.db :reload-all)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" "1001")
(aquire-movie "111" "1002")
(aquire-movie "111" "1003")
(swap! users update-in [111 :mids] conj 1004)
@users
(swap! users update-in [111 :mids] conj 1002)
@users
(aquire-movie "111" 1003)
(aquire-movie "111" "1007")
(prn @users)
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" 1003)
(aquire-movie "111" "1003")
(aquire-movie "111" "1002")
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" "1002")
(aquire-movie "111" "1003")
(aquire-movie "111" "1004")
(quit)
(use 'mooviefishsrv.models.db :reload-all)
(aquire-movie "111" "1004")
(aquire-movie "111" "1003")
(aquire-movie "111" "1002")
(aquire-movie "111" "1001")
(prn @utils)
(prn @users)
(aquire-movie "112" "1001")
(prn @users)
(quit)
